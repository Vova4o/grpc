// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: maxnum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaxNumberServiceClient is the client API for MaxNumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaxNumberServiceClient interface {
	GetMaxNumber(ctx context.Context, opts ...grpc.CallOption) (MaxNumberService_GetMaxNumberClient, error)
}

type maxNumberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxNumberServiceClient(cc grpc.ClientConnInterface) MaxNumberServiceClient {
	return &maxNumberServiceClient{cc}
}

func (c *maxNumberServiceClient) GetMaxNumber(ctx context.Context, opts ...grpc.CallOption) (MaxNumberService_GetMaxNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaxNumberService_ServiceDesc.Streams[0], "/calculator.MaxNumberService/GetMaxNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxNumberServiceGetMaxNumberClient{stream}
	return x, nil
}

type MaxNumberService_GetMaxNumberClient interface {
	Send(*GetMaxNumberRequest) error
	Recv() (*GetMaxNumberResponse, error)
	grpc.ClientStream
}

type maxNumberServiceGetMaxNumberClient struct {
	grpc.ClientStream
}

func (x *maxNumberServiceGetMaxNumberClient) Send(m *GetMaxNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxNumberServiceGetMaxNumberClient) Recv() (*GetMaxNumberResponse, error) {
	m := new(GetMaxNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxNumberServiceServer is the server API for MaxNumberService service.
// All implementations must embed UnimplementedMaxNumberServiceServer
// for forward compatibility
type MaxNumberServiceServer interface {
	GetMaxNumber(MaxNumberService_GetMaxNumberServer) error
	mustEmbedUnimplementedMaxNumberServiceServer()
}

// UnimplementedMaxNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaxNumberServiceServer struct {
}

func (UnimplementedMaxNumberServiceServer) GetMaxNumber(MaxNumberService_GetMaxNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMaxNumber not implemented")
}
func (UnimplementedMaxNumberServiceServer) mustEmbedUnimplementedMaxNumberServiceServer() {}

// UnsafeMaxNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaxNumberServiceServer will
// result in compilation errors.
type UnsafeMaxNumberServiceServer interface {
	mustEmbedUnimplementedMaxNumberServiceServer()
}

func RegisterMaxNumberServiceServer(s grpc.ServiceRegistrar, srv MaxNumberServiceServer) {
	s.RegisterService(&MaxNumberService_ServiceDesc, srv)
}

func _MaxNumberService_GetMaxNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxNumberServiceServer).GetMaxNumber(&maxNumberServiceGetMaxNumberServer{stream})
}

type MaxNumberService_GetMaxNumberServer interface {
	Send(*GetMaxNumberResponse) error
	Recv() (*GetMaxNumberRequest, error)
	grpc.ServerStream
}

type maxNumberServiceGetMaxNumberServer struct {
	grpc.ServerStream
}

func (x *maxNumberServiceGetMaxNumberServer) Send(m *GetMaxNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxNumberServiceGetMaxNumberServer) Recv() (*GetMaxNumberRequest, error) {
	m := new(GetMaxNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxNumberService_ServiceDesc is the grpc.ServiceDesc for MaxNumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaxNumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.MaxNumberService",
	HandlerType: (*MaxNumberServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMaxNumber",
			Handler:       _MaxNumberService_GetMaxNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxnum.proto",
}
