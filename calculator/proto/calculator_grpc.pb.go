// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeNumberServiceClient is the client API for PrimeNumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeNumberServiceClient interface {
	Numbers(ctx context.Context, in *GetPrimeNumbers, opts ...grpc.CallOption) (PrimeNumberService_NumbersClient, error)
	AverageOfSumm(ctx context.Context, opts ...grpc.CallOption) (PrimeNumberService_AverageOfSummClient, error)
	Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error)
}

type primeNumberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeNumberServiceClient(cc grpc.ClientConnInterface) PrimeNumberServiceClient {
	return &primeNumberServiceClient{cc}
}

func (c *primeNumberServiceClient) Numbers(ctx context.Context, in *GetPrimeNumbers, opts ...grpc.CallOption) (PrimeNumberService_NumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeNumberService_ServiceDesc.Streams[0], "/calculator.PrimeNumberService/Numbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeNumberServiceNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeNumberService_NumbersClient interface {
	Recv() (*GetPrimeNumbersResponse, error)
	grpc.ClientStream
}

type primeNumberServiceNumbersClient struct {
	grpc.ClientStream
}

func (x *primeNumberServiceNumbersClient) Recv() (*GetPrimeNumbersResponse, error) {
	m := new(GetPrimeNumbersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primeNumberServiceClient) AverageOfSumm(ctx context.Context, opts ...grpc.CallOption) (PrimeNumberService_AverageOfSummClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeNumberService_ServiceDesc.Streams[1], "/calculator.PrimeNumberService/AverageOfSumm", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeNumberServiceAverageOfSummClient{stream}
	return x, nil
}

type PrimeNumberService_AverageOfSummClient interface {
	Send(*GetPrimeNumbers) error
	CloseAndRecv() (*GetAverageSummNumbersResponse, error)
	grpc.ClientStream
}

type primeNumberServiceAverageOfSummClient struct {
	grpc.ClientStream
}

func (x *primeNumberServiceAverageOfSummClient) Send(m *GetPrimeNumbers) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primeNumberServiceAverageOfSummClient) CloseAndRecv() (*GetAverageSummNumbersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetAverageSummNumbersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primeNumberServiceClient) Sqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error) {
	out := new(SqrtResponse)
	err := c.cc.Invoke(ctx, "/calculator.PrimeNumberService/Sqrt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimeNumberServiceServer is the server API for PrimeNumberService service.
// All implementations must embed UnimplementedPrimeNumberServiceServer
// for forward compatibility
type PrimeNumberServiceServer interface {
	Numbers(*GetPrimeNumbers, PrimeNumberService_NumbersServer) error
	AverageOfSumm(PrimeNumberService_AverageOfSummServer) error
	Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error)
	mustEmbedUnimplementedPrimeNumberServiceServer()
}

// UnimplementedPrimeNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeNumberServiceServer struct {
}

func (UnimplementedPrimeNumberServiceServer) Numbers(*GetPrimeNumbers, PrimeNumberService_NumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method Numbers not implemented")
}
func (UnimplementedPrimeNumberServiceServer) AverageOfSumm(PrimeNumberService_AverageOfSummServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageOfSumm not implemented")
}
func (UnimplementedPrimeNumberServiceServer) Sqrt(context.Context, *SqrtRequest) (*SqrtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedPrimeNumberServiceServer) mustEmbedUnimplementedPrimeNumberServiceServer() {}

// UnsafePrimeNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeNumberServiceServer will
// result in compilation errors.
type UnsafePrimeNumberServiceServer interface {
	mustEmbedUnimplementedPrimeNumberServiceServer()
}

func RegisterPrimeNumberServiceServer(s grpc.ServiceRegistrar, srv PrimeNumberServiceServer) {
	s.RegisterService(&PrimeNumberService_ServiceDesc, srv)
}

func _PrimeNumberService_Numbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPrimeNumbers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeNumberServiceServer).Numbers(m, &primeNumberServiceNumbersServer{stream})
}

type PrimeNumberService_NumbersServer interface {
	Send(*GetPrimeNumbersResponse) error
	grpc.ServerStream
}

type primeNumberServiceNumbersServer struct {
	grpc.ServerStream
}

func (x *primeNumberServiceNumbersServer) Send(m *GetPrimeNumbersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PrimeNumberService_AverageOfSumm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimeNumberServiceServer).AverageOfSumm(&primeNumberServiceAverageOfSummServer{stream})
}

type PrimeNumberService_AverageOfSummServer interface {
	SendAndClose(*GetAverageSummNumbersResponse) error
	Recv() (*GetPrimeNumbers, error)
	grpc.ServerStream
}

type primeNumberServiceAverageOfSummServer struct {
	grpc.ServerStream
}

func (x *primeNumberServiceAverageOfSummServer) SendAndClose(m *GetAverageSummNumbersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primeNumberServiceAverageOfSummServer) Recv() (*GetPrimeNumbers, error) {
	m := new(GetPrimeNumbers)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrimeNumberService_Sqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimeNumberServiceServer).Sqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.PrimeNumberService/Sqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimeNumberServiceServer).Sqrt(ctx, req.(*SqrtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimeNumberService_ServiceDesc is the grpc.ServiceDesc for PrimeNumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeNumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.PrimeNumberService",
	HandlerType: (*PrimeNumberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sqrt",
			Handler:    _PrimeNumberService_Sqrt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Numbers",
			Handler:       _PrimeNumberService_Numbers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageOfSumm",
			Handler:       _PrimeNumberService_AverageOfSumm_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
